{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","clearInput","valueIsValid","trim","length","onSubmit","e","preventDefault","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","onClick","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAYtCC,EAAa,WACfD,EAAc,KAEZE,EAAe,kBAAIH,EAAWI,OAAOC,OAAO,GAClD,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACEL,MACAL,GAAc,SAAAW,GAAU,OAAIT,GAAJ,mBAAkBS,OAC1CP,MAQJ,SACI,uBACIQ,KAAK,OACLC,MAAOX,EACPY,SAnBc,SAACL,GACvBN,EAAcM,EAAEM,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,MAA4B,CAC9CF,GAAIA,EACJC,MAAOA,EACPT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,UAAUX,QARR,kBAUZM,GAVY,4CAAH,sDCEPM,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IAEpC,OACI,sBAAKa,UAAU,OAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,EAAMrB,OAAO,EAAEqB,EAAM,MACzC,8BAAMA,EAAMrB,OAAO,EAAEqB,EAAM,iBCH1BO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAK,GACLY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KActC,OATAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,IACIC,EDXwBK,CAAazB,GAAhCY,EAFyB,EAE9BL,KAAaY,EAFiB,EAEjBA,QAEpB,OACI,qCACA,6BAAKnB,IACJmB,GAAW,qBAAKJ,UAAU,UAAf,yBACZ,qBAAKA,UAAU,uDAAf,SAEQH,EAAOH,KAAI,SAAAiB,GAAK,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAMhB,aEUpBiB,EAtBM,WAAO,IAAD,EACa3C,mBAAS,IADtB,mBAChBU,EADgB,KACJX,EADI,KAKvB,OACI,qCACI,8CACA,wBAAQgC,UAAU,YAAYa,QANV,WACxB7C,EAAc,KAKV,kCACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,8BACKW,EAAWe,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCb7B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.8f90d323.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e)=>{\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if (valueIsValid()) {\n            setCategories(categories=>[ inputValue,...categories]);\n            clearInput();\n        }\n    }\n    const clearInput = ()=>{\n        setInputValue('');\n    }\n    const valueIsValid = ()=>inputValue.trim().length>2;\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Wq1IjwGjIHVoB65YfTvlHsBOhgqP6oeL`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(({ id, title, images }) => ({\n        id: id,\n        title: title,\n        url: images?.downsized.url\n    }));\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title.length>0?title:'h'}/>\n            <div>{title.length>0?title:'No title'}</div>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n        <h3>{category}</h3>\n        {loading && <div className=\"loading\">Cargando...</div>}\n        <div className=\"card-container animate__animated animate__fadeInLeft\">\n            {\n                images.map(image => (\n                    <GifGridItem\n                        key={image.id}\n                        {...image}\n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs=>{\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, []);\n    return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState([]);\n    const handleClearCategory = ()=>{\n        setCategories([]);\n    }\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <button className=\"btn-clear\" onClick={handleClearCategory}>Limpiar b√∫squedas</button>\n            <hr />\n            <AddCategory setCategories={setCategories} />\n            <div>\n                {categories.map(category => (\n                    <GifGrid\n                        key={category}\n                        category={category}\n                    />))}\n            </div>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}